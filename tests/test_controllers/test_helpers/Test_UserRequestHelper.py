from unittest import TestCase
import nose
from src.controllers.helpers.UserRequestHelper import validate_user_request


class TestValidateUserRequest(TestCase):

    def test_validate_user_request_with_extralong_phonenumber(self):
        data = {
            "phone_number": "23432432434324234342343242343243243432423434234324"
        }

        error_list = validate_user_request(data)

        nose.tools.assert_in('phone_number has to be less than 20 characters', error_list, 'expected error message non returned from validate_user_request')

    def test_validate_user_request_with_nonstring_phonenumber(self):
        data = {
            "phone_number": 2
        }

        error_list = validate_user_request(data)
        nose.tools.assert_in('phone_number has to be a string', error_list, 'expected error message non returned from validate_user_request')

    def test_validate_user_request_with_extralong_email(self):
        data = {
            "phone_number": "234-234-2342",
            "email": "2343243243432423434234324234324324343242343423432423432432434324234342343242343243243432423434234324234324324343242343423432423432432434324234342343242343243243432423434234324234324324343242343423432423432432434324234342343242343243243432423434234324@email.com"
        }

        error_list = validate_user_request(data)

        nose.tools.assert_in('email has to be less than 200 characters', error_list, 'expected error message non returned from validate_user_request')

    def test_validate_user_request_with_nonstring_email(self):
        data = {
            "email": 2
        }

        error_list = validate_user_request(data)
        nose.tools.assert_in('email has to be a string', error_list, 'expected error message non returned from validate_user_request')

    def test_validate_user_request_with_extralong_fullname(self):
        data = {
            "full_name": "2343243243432423434234324234324324343242343423432423432432434324234342343242343243243432423434234324234324324343242343423432423432432434324234342343242343243243432423434234324234324324343242343423432423432432434324234342343242343243243432423434234324"
        }

        error_list = validate_user_request(data)

        nose.tools.assert_in('full_name has to be less than 200 characters', error_list, 'expected error message non returned from validate_user_request')

    def test_validate_user_request_with_nonstring_fullname(self):
        data = {
            "full_name": 2
        }

        error_list = validate_user_request(data)
        nose.tools.assert_in('full_name has to be a string', error_list, 'expected error message non returned from validate_user_request')

    def test_validate_user_request_with_extralong_password(self):
        data = {
            "password": "2343243243432423434234324234324324343242343423432423432432434324234342343242343243243432423434234324234324324343242343423432423432432434324234342343242343243243432423434234324234324324343242343423432423432432434324234342343242343243243432423434234324"
        }

        error_list = validate_user_request(data)

        nose.tools.assert_in('password has to be less than 100 characters', error_list, 'expected error message non returned from validate_user_request')

    def test_validate_user_request_with_nonstring_password(self):
        data = {
            "password": 2
        }

        error_list = validate_user_request(data)
        nose.tools.assert_in('password has to be a string', error_list, 'expected error message non returned from validate_user_request')

    def test_validate_user_request_with_extralong_metadata(self):
        data = {
            "metadata
        }

        error_list = validate_user_request(data)

        nose.tools.assert_in('metadata has to be less than 2000 characters', error_list, 'expected error message non returned from validate_user_request')

    def test_validate_user_request_with_nonstring_metadata(self):
        data = {
            "metadata": 2
        }

        error_list = validate_user_request(data)
        nose.tools.assert_in('metadata has to be a string', error_list, 'expected error message non returned from validate_user_request')